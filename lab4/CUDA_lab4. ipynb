{"cells":[{"cell_type":"markdown","metadata":{"id":"GdM-3tzilgXw"},"source":["---\n","# **LAB 4 - CUDA in Python**\n","---"]},{"cell_type":"markdown","metadata":{"id":"WoJbB3T5Vkw-"},"source":["# ‚ñ∂Ô∏è CUDA setup"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1647941345487,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"Fht2Wy8wVkxJ","outputId":"f72b5368-fd33-4736-ca5c-ecc0da93fbf7"},"outputs":[{"output_type":"stream","name":"stdout","text":["nvcc: NVIDIA (R) Cuda compiler driver\n","Copyright (c) 2005-2020 NVIDIA Corporation\n","Built on Mon_Oct_12_20:09:46_PDT_2020\n","Cuda compilation tools, release 11.1, V11.1.105\n","Build cuda_11.1.TC455_06.29190527_0\n"]}],"source":["!nvcc --version"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":346,"status":"ok","timestamp":1647941346289,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"0jP2H_YJVkxJ","outputId":"d5197b12-48bc-4a07-bf3f-98ede6069bbf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Mar 22 09:29:05 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   73C    P0    75W / 149W |   2348MiB / 11441MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"]},{"cell_type":"markdown","metadata":{"id":"VKbaxH9wWosO"},"source":["[GPU Compute Capability](https://developer.nvidia.com/cuda-gpus)"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1647941346289,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"mhnDb4qS65Um","outputId":"18ec0da2-4856-4cc4-e9a6-ae6e0f654fd7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 1 CUDA devices\n","id 0            b'Tesla K80'                              [SUPPORTED]\n","                      compute capability: 3.7\n","                           pci device id: 4\n","                              pci bus id: 0\n","Summary:\n","\t1/1 devices are supported\n"]}],"source":["from numba import cuda\n","\n","# getting device information\n","cuda.detect();"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"vKtSX7K16op9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647941346290,"user_tz":-60,"elapsed":3,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}},"outputId":"6dcd39fa-8684-436d-c453-1c5f9bed4e67"},"outputs":[{"output_type":"stream","name":"stdout","text":["COMPUTE_CAPABILITY = (3, 7)\n","MULTIPROCESSOR_COUNT = 13\n","MAX_REGISTERS_PER_BLOCK = 65536\n","MAX_SHARED_MEMORY_PER_BLOCK = 49152\n"]}],"source":["from numba import cuda\n","\n","attribs = ['COMPUTE_CAPABILITY', 'MULTIPROCESSOR_COUNT', 'MAX_REGISTERS_PER_BLOCK', \n","         'MAX_SHARED_MEMORY_PER_BLOCK', ]\n","device = cuda.get_current_device()\n","#attribs = [s for s in dir(device) if s.isupper()]        # all attribs\n","for attr in attribs:\n","    print(attr, '=', getattr(device, attr))"]},{"cell_type":"code","execution_count":21,"metadata":{"cellView":"form","id":"O8ICSyy8_GEq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647941346290,"user_tz":-60,"elapsed":3,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}},"outputId":"0da3c9bf-59e4-431b-8481-fbcc28d43fcb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting /root/.bashrc\n"]}],"source":["#@title Bash setup\n","%%writefile /root/.bashrc\n","\n","# If not running interactively, don't do anything\n","[ -z \"$PS1\" ] && return\n","\n","# don't put duplicate lines in the history. See bash(1) for more options\n","# ... or force ignoredups and ignorespace\n","HISTCONTROL=ignoredups:ignorespace\n","\n","# append to the history file, don't overwrite it\n","shopt -s histappend\n","\n","# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)\n","HISTSIZE=10000\n","HISTFILESIZE=20000\n","\n","# check the window size after each command and, if necessary,\n","# update the values of LINES and COLUMNS.\n","shopt -s checkwinsize\n","\n","# make less more friendly for non-text input files, see lesspipe(1)\n","[ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\"\n","\n","PS1='\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '\n","\n","# enable color support of ls and also add handy aliases\n","if [ -x /usr/bin/dircolors ]; then\n","    test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\n","    alias ls='ls --color=auto'\n","    #alias dir='dir --color=auto'\n","    #alias vdir='vdir --color=auto'\n","\n","    alias grep='grep --color=auto'\n","    alias fgrep='fgrep --color=auto'\n","    alias egrep='egrep --color=auto'\n","fi\n","\n","# some more ls aliases\n","alias ll='ls -lF'\n","alias la='ls -A'\n","alias l='ls -CF'\n","\n","# path setup\n","export PATH=\"./:/usr/local/cuda/bin:$PATH\"\n","\n","!source /root/.bashrc"]},{"cell_type":"markdown","metadata":{"id":"DIEwSWSiTmCq"},"source":["Clone GPUcomputing site on github..."]},{"cell_type":"code","execution_count":22,"metadata":{"id":"PNDBUaqqTd66","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647941346290,"user_tz":-60,"elapsed":2,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}},"outputId":"3cdb3eec-05ce-4cff-a98d-c297ff24f7f5"},"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: destination path 'GPUcomputing' already exists and is not an empty directory.\n"]}],"source":["!git clone https://github.com/giulianogrossi/GPUcomputing.git"]},{"cell_type":"markdown","metadata":{"id":"QadLRsY0hIga"},"source":["# üêç Add kernel"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aV8uMs78bIBD"},"outputs":[],"source":["from numba import cuda\n","import numpy as np"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QrCQalOJm0AC"},"outputs":[],"source":["# CUDA kernels written with `@cuda.jit` do not return values\n","@cuda.jit\n","def add_kernel(x, y, z):\n","  \"\"\"Perform vector sum z = x * y\n","  \"\"\"\n","    \n","  # The actual values of the following CUDA-provided variables for thread and block indices,\n","  # like function parameters, are not known until the kernel is launched.\n","  \n","  # This calculation gives a unique thread index within the entire grid (see the slides above for more)\n","  idx = cuda.grid(1)      # 1 = one dimensional thread grid, returns a single value.\n","                          # This Numba-provided convenience function is equivalent to\n","                          # `cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x`\n","\n","  # This thread will do the work on the data element with the same index as its own\n","  # unique index within the grid.\n","  z[idx] = x[idx] + y[idx]"]},{"cell_type":"markdown","metadata":{"id":"nPUwTxgiGOrt"},"source":["Define the kernel parameters..."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Ic-tvzTGMsi"},"outputs":[],"source":["# Because of how we wrote the kernel above, we need to have a 1 thread to one data element mapping,\n","# therefore we define the number of threads in the grid (128*32) to equal n (4096).\n","threads_per_block = 128\n","blocks_per_grid = 32"]},{"cell_type":"markdown","metadata":{"id":"G-Ou-SvFGiZg"},"source":["Generate data and device setup/transfert..."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dy4bV7iOGmmA"},"outputs":[],"source":["# populate data\n","n = 4096\n","x = np.arange(n).astype(np.int32) # [0...4095] on the host\n","y = np.ones_like(x)               # [1...1] on the host\n","\n","d_x = cuda.to_device(x) # Copy of x on the device\n","d_y = cuda.to_device(y) # Copy of y on the device\n","d_out = cuda.device_array_like(d_x) # Like np.array_like, but for device arrays\n"]},{"cell_type":"markdown","metadata":{"id":"hYjgy8yNZ3N_"},"source":["launch the kernel..."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":995,"status":"ok","timestamp":1647843877245,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"YTO_bWV0Zylu","outputId":"91445d3f-b564-4124-b52f-4f8c502a095c"},"outputs":[{"name":"stdout","output_type":"stream","text":["[   1    2    3 ... 4094 4095 4096]\n","CPU times: user 267 ms, sys: 136 ms, total: 402 ms\n","Wall time: 523 ms\n"]}],"source":["%%time\n","add_kernel[blocks_per_grid, threads_per_block](d_x, d_y, d_out)\n","cuda.synchronize()\n","print(d_out.copy_to_host()) # Should be [1...4096]"]},{"cell_type":"markdown","metadata":{"id":"D-xki0BeGIOY"},"source":["# üêç Mat multiplication kernel"]},{"cell_type":"markdown","source":["A tutorial that explains NumPy axes: [Numpy axes](https://www.sharpsightlabs.com/blog/numpy-axes-explained/)"],"metadata":{"id":"bTMtXizJ-lVQ"}},{"cell_type":"code","execution_count":23,"metadata":{"id":"FBRTfOF5BIAK","executionInfo":{"status":"ok","timestamp":1647941389181,"user_tz":-60,"elapsed":193,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}}},"outputs":[],"source":["from numba import cuda\n","import numpy as np"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"vzoVtm6O61DL","executionInfo":{"status":"ok","timestamp":1647941805138,"user_tz":-60,"elapsed":228,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}}},"outputs":[],"source":["@cuda.jit\n","def matmul_gpu(A, B, C):\n","  \"\"\"\n","    Perform square matrix multiplication of C = A * B\n","  \"\"\"\n","  row, col = cuda.grid(2)\n","  if row < C.shape[0] and col < C.shape[1]:\n","    tmp = 0.\n","    for k in range(A.shape[1]):\n","      tmp += A[row, k] * B[k, col]\n","    C[row, col] = tmp\n","\n","# matrix multiplication using the cpu and C-like programming style (** strongly discouraged **)\n","def matmul_cpu(A, B):\n","  \"\"\"\n","  Perform square matrix multiplication of C = A * B\n","  \"\"\"\n","  C = np.zeros((A.shape[1],B.shape[1]))\n","  for i in range(A.shape[1]):\n","    for j in range(B.shape[0]):\n","      tmp = 0.                            \n","      for k in range(A.shape[1]):\n","        tmp += A[i, k] * B[k, j]   # multiply elements in row i of A and column j of B and add to temp\n","      C[i, j] = tmp    "]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":565,"status":"ok","timestamp":1647942195644,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"IGEoEUjo683n","outputId":"a7862e96-93c1-4831-b023-ca80cd09cad9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('float32')"]},"metadata":{},"execution_count":50}],"source":["# generate random vals\n","np.random.seed(42)\n","SIZE = 5000\n","A = np.ones((SIZE,SIZE)).astype('float32')  # mat 1\n","B = np.ones((SIZE,SIZE)).astype('float32')  # mat 2\n","#C = np.zeros((SIZE,SIZE)).astype('float32')                       # mat where we store answer \n","\n","d_A = cuda.to_device(A) # Copy of A on the device\n","d_B = cuda.to_device(B) # Copy of B on the device\n","d_C = cuda.device_array_like(A) # malloc on the device\n","\n","# data type\n","d_A.dtype"]},{"cell_type":"code","execution_count":54,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":513,"status":"ok","timestamp":1647942308708,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"UK0F2rZlR4mK","outputId":"0372ad5d-164d-494e-e741-024b179dac23"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Mar 22 09:45:08 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   71C    P0    74W / 149W |   1108MiB / 11441MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"]},{"cell_type":"code","execution_count":55,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":203,"status":"ok","timestamp":1647942314659,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"5bpfjqOWGrA5","outputId":"1c78ec33-7e29-462f-fedf-73addc0becd9"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[231. 231. 231. ...   0.   0.   0.]\n"," [231. 231. 231. ...   0.   0.   0.]\n"," [231. 231. 231. ...   0.   0.   0.]\n"," ...\n"," [  0.   0.   0. ... 239. 239. 239.]\n"," [  0.   0.   0. ... 239. 239. 239.]\n"," [  0.   0.   0. ... 239. 239. 239.]]\n"]}],"source":["print(C)"]},{"cell_type":"markdown","metadata":{"id":"zgJRscuQhrs4"},"source":["Kernel parameters..."]},{"cell_type":"code","execution_count":56,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":207,"status":"ok","timestamp":1647942321305,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"tlBglj4fGVCT","outputId":"aaa2ef14-09e2-400d-cb5b-957867dcf864"},"outputs":[{"output_type":"stream","name":"stdout","text":["(625, 625)\n","The kernel will be executed up to element 10000\n"]}],"source":["block = (16, 16)  # each block will contain 16x16 threads, typically 128 - 512 threads/block\n","grid_x = int(np.ceil(C.shape[0] / block[0]))\n","grid_y = int(np.ceil(C.shape[1] / block[1]))\n","grid = (grid_x, grid_y)  # we calculate the gridsize (number of blocks) from array\n","print(grid)\n","print(f\"The kernel will be executed up to element {block[0]*grid_x}\")"]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15101,"status":"ok","timestamp":1647942338952,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"ec9uXEHSGiex","outputId":"c7ee84df-8fe4-4096-aed3-2932c0254ca5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Elapsed (sec) = 14.931994676589966\n"]}],"source":["# execution of the kernel\n","start = time.time()\n","matmul_gpu[grid, block](d_A, d_B, d_C)\n","# host and device sync\n","cuda.synchronize()\n","end = time.time()\n","print(\"Elapsed (sec) = %s\" % (end - start))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":321,"status":"ok","timestamp":1647850451957,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"7P7nxI9beoPD","outputId":"cce92306-1521-41c5-8a50-89ee45009875"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1000. 1000. 1000. ... 1000. 1000. 1000.]\n"," [1000. 1000. 1000. ... 1000. 1000. 1000.]\n"," [1000. 1000. 1000. ... 1000. 1000. 1000.]\n"," ...\n"," [1000. 1000. 1000. ... 1000. 1000. 1000.]\n"," [1000. 1000. 1000. ... 1000. 1000. 1000.]\n"," [1000. 1000. 1000. ... 1000. 1000. 1000.]]\n"]}],"source":["C = d_C.copy_to_host()\n","print(C)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MNkQpD0XJ1mS"},"outputs":[],"source":["%%time\n","# execution of the python function in C-like programming style (strongly discouraged)\n","D = matmul_cpu(A, B)"]},{"cell_type":"code","execution_count":60,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3740,"status":"ok","timestamp":1647942416168,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"gKK5r5tbL8Z9","outputId":"7140d21f-7c97-485f-8224-7ada2ffd13f2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Elapsed (sec) = 3.548175096511841\n"]}],"source":["# using numpy function\n","start = time.time()\n","C = np.dot(A, B)\n","end = time.time()\n","print(\"Elapsed (sec) = %s\" % (end - start))"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":210,"status":"ok","timestamp":1647942020219,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"qigD6_LKgpOr","outputId":"a571651e-1b99-4b20-ca6c-7f7019793b87"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[10000. 10000. 10000. ... 10000. 10000. 10000.]\n"," [10000. 10000. 10000. ... 10000. 10000. 10000.]\n"," [10000. 10000. 10000. ... 10000. 10000. 10000.]\n"," ...\n"," [10000. 10000. 10000. ... 10000. 10000. 10000.]\n"," [10000. 10000. 10000. ... 10000. 10000. 10000.]\n"," [10000. 10000. 10000. ... 10000. 10000. 10000.]]\n"]}],"source":["print(C)"]},{"cell_type":"markdown","metadata":{"id":"m0phl-Kp-IpW"},"source":["# üêç Histogram"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"39smdj2hlvE4","executionInfo":{"status":"ok","timestamp":1648131387798,"user_tz":-60,"elapsed":992,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}}},"outputs":[],"source":["from numba import cuda\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"id":"4w-eKaICUut7"},"source":["## üî¥ TODO"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"Cmge3NGnNkfb","executionInfo":{"status":"ok","timestamp":1648131387798,"user_tz":-60,"elapsed":3,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}}},"outputs":[],"source":["@cuda.jit\n","def BMP_hist(I, hist):\n","  '''\n","  Increment bin counts in hist\n","    params:\n","      - I (uint8)  : HxWx3 matrix\n","      - hist (int) : 256x3 matrix\n","  '''\n","\n","  i, j = cuda.grid(2)  \n","  R = I[i,j,0]\n","  G = I[i,j,1]\n","  B = I[i,j,2]\n","  cuda.atomic.add(hist[0], R, 1)\n","  cuda.atomic.add(hist[1], G, 1)\n","  cuda.atomic.add(hist[2], B, 1)"]},{"cell_type":"markdown","metadata":{"id":"LEhX3FMsU4wZ"},"source":["## Gestione immagine e kernel..."]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"elapsed":363,"status":"error","timestamp":1648131388160,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"SFEoj0hudWKT","outputId":"ef404ca2-1bf1-4bbb-decf-97b055ae5333"},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-0865f0286bf7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#image.save('beach1.bmp')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'GPUcomputing/images/dog.bmp'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mimg_rgb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'RGB'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mimg_rgb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2841\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2842\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2843\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2844\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2845\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'GPUcomputing/images/dog.bmp'"]}],"source":["from PIL import Image\n","\n","#image.save('beach1.bmp')\n","img = Image.open('GPUcomputing/images/dog.bmp')\n","img_rgb = img.convert('RGB')\n","img_rgb"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"aborted","timestamp":1648131388160,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"H6KKuOF0-J0Z"},"outputs":[],"source":["# converto to numpy (host)\n","I = np.asarray(img)\n","print(f\"Image size W x H x ch = {I.shape}\")\n","\n","# device data setup\n","d_I = cuda.to_device(I)\n","H = np.zeros((3,256)).astype(np.float32)\n","d_H = cuda.to_device(H)"]},{"cell_type":"markdown","metadata":{"id":"YKvOMIuuiEY6"},"source":["Kernel parameters..."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"aborted","timestamp":1648131388160,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"Of0_Z_U-h7r0"},"outputs":[],"source":["block = (16, 16)  # each block will contain 16x16 threads, typically 128 - 512 threads/block\n","grid_x = int(np.ceil(I.shape[0] / block[0]))\n","grid_y = int(np.ceil(I.shape[1] / block[1]))\n","grid = (grid_x, grid_y)  # we calculate the gridsize (number of blocks) from array\n","print(grid)\n","print(f\"The kernel will be executed up to element {block[0]*grid_x}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"aborted","timestamp":1648131388160,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"xSPvkDBhU7wD"},"outputs":[],"source":["# kernel launch\n","\n","BMP_hist[grid, block](d_I, d_H)\n","hist = d_H.copy_to_host()\n","print(hist.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":2,"status":"aborted","timestamp":1648131388160,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"aPfeWSylWPRQ"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","plt.bar(np.arange(256),hist[0])\n","plt.title('Histogram (R)')\n","plt.show()\n","plt.bar(np.arange(256),hist[1])\n","plt.title('Histogram (G)')\n","plt.show()\n","plt.bar(np.arange(256),hist[2])\n","plt.title('Histogram (B)')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"qksYnBHcuJGi"},"source":["# üî¥ TODO"]},{"cell_type":"markdown","metadata":{"id":"OO6JAs2hubiH"},"source":["Calcolare il prodotto di matrici MQDB con kernel CUDA in Python"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"j_LB5W3iQ0IR","executionInfo":{"status":"ok","timestamp":1647942425364,"user_tz":-60,"elapsed":186,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}}},"outputs":[],"source":["from numba import cuda\n","import numpy as np\n","import time\n","\n","def MQDB_gen(n, k, values=None):\n","  \"\"\"\n","  Generate a random MQDB of size n with k (random sized) blocks\n","    params:\n","      n (int)                : mat size\n","      k (int or list)        : the number of blocks or blocks dims (list)\n","      values (string or num) : the string 'rand' for random values, \n","                               a scalar for constant values everywere,\n","                               'None' for no assignement        \n","  \"\"\"\n","  # blocks dims\n","  if isinstance(k, (list, np.ndarray)):\n","    blkdims = k  # list of already defined dims\n","  else:          # generate new dims\n","    bins = np.concatenate((np.ones(n), np.zeros(n*(k-1))))\n","    np.random.shuffle(bins)\n","    blkdims = np.sum(bins.reshape(k,n),axis=1).astype('int')\n","  print(f\"Mat size n = {n}  --  num blocks k = {blkdims.shape[0]}\")\n","  print('Blocks dims = ', blkdims)\n","  \n","  A = np.zeros((n,n))\n","  # filling of blocks \n","  if values is not None:\n","    end = 0\n","    for b in blkdims:\n","      start = end\n","      end = end + b\n","      if values == 'rand':\n","        A[start:end,start:end] = np.random.rand(b,b)\n","      else:\n","        A[start:end,start:end] = values*np.ones(b,b)\n","      \n","  # return final data\n","  return A, blkdims\n","\n","@cuda.jit\n","def matmul_MQDB(A, B, C, blkdim, blksum):\n","  \"\"\"\n","  Perform MQDB matrix multiplication C = A * B\n","  params:\n","      A,B,C (MQDB) : omogeneous MQDB types \n","      blkdim (int) : the current block dim\n","      blksum (int) : sum of the previous blocks sizes    \n","  \"\"\"\n","  row, col = cuda.grid(2)\n","  if row < blkdim and col < blkdim:\n","    tmp = 0.\n","    for k in range(blkdim):\n","      tmp += A[row+blksum, k+blksum] * B[k+blksum, col+blksum]\n","    C[row+blksum, col+blksum] = tmp\n"]},{"cell_type":"code","execution_count":62,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1191,"status":"ok","timestamp":1647942431886,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"},"user_tz":-60},"id":"NIimRLkTV44r","outputId":"8279f080-d40c-4893-f3f2-2152f706bb04"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mat size n = 10000  --  num blocks k = 4\n","Blocks dims =  [2551 2479 2460 2510]\n","Mat size n = 10000  --  num blocks k = 4\n","Blocks dims =  [2551 2479 2460 2510]\n","Mat size n = 10000  --  num blocks k = 4\n","Blocks dims =  [2551 2479 2460 2510]\n"]}],"source":["# generate random blocks and data\n","n = 10000\n","k = 4\n","A, blkdims = MQDB_gen(n, k, values=1)\n","B, _ = MQDB_gen(n, blkdims, values=1)\n","C, _ = MQDB_gen(n, blkdims)\n","\n","# device mem\n","d_A = cuda.to_device(A) # Copy of A on the device\n","d_B = cuda.to_device(B) # Copy of B on the device\n","d_C = cuda.device_array_like(A) # malloc on the device"]},{"cell_type":"code","execution_count":63,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JDRKviEMWM88","executionInfo":{"status":"ok","timestamp":1647942444239,"user_tz":-60,"elapsed":9930,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}},"outputId":"9bbdfa05-ddee-44df-ca45-d7ec43b5e84e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Elapsed (sec) = 9.475791454315186\n"]}],"source":["# run the kernels\n","\n","# warm up \n","matmul_MQDB[grid, block](d_A, d_B, d_C, blkdims[0], 0)\n","\n","start = time.time()\n","block = (16, 16) # block size\n","for i in range(k):\n","  grid_x = int(np.ceil(blkdims[i]/block[0]))\n","  grid_y = int(np.ceil(blkdims[i]/block[1]))\n","  grid = (grid_x, grid_y)  \n","  sum_blks = 0 if i==0 else np.sum(blkdims[0:i])\n","  # kernel launch\n","  matmul_MQDB[grid, block](d_A, d_B, d_C, blkdims[i], sum_blks)\n","\n","# host and device sync\n","cuda.synchronize()\n","end = time.time()\n","print(\"Elapsed (sec) = %s\" % (end - start))\n"]},{"cell_type":"code","execution_count":64,"metadata":{"id":"yiFFAQ6CYEzw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647942464257,"user_tz":-60,"elapsed":580,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}},"outputId":"f63cd3e3-57cb-40bb-ccc5-bc1c05b837bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["results: matrx C\n","[[2551. 2551. 2551. ...    0.    0.    0.]\n"," [2551. 2551. 2551. ...    0.    0.    0.]\n"," [2551. 2551. 2551. ...    0.    0.    0.]\n"," ...\n"," [   0.    0.    0. ... 2510. 2510. 2510.]\n"," [   0.    0.    0. ... 2510. 2510. 2510.]\n"," [   0.    0.    0. ... 2510. 2510. 2510.]]\n"]}],"source":["# print results\n","print('results: matrx C')\n","import sys\n","C = d_C.copy_to_host() # copy to host from device\n","print(C)"]},{"cell_type":"code","source":["# using numpy function\n","\n","start = time.time()\n","np.dot(A,B)\n","end = time.time()\n","print(\"Elapsed (sec) = %s\" % (end - start))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a0WiSJUIuNpP","executionInfo":{"status":"ok","timestamp":1647942111687,"user_tz":-60,"elapsed":57277,"user":{"displayName":"Giuliano Grossi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5sNDnF8-qm3GijjkEscLaLhW25DgVgJ4Cf6SQ_Q=s64","userId":"05046904419500019805"}},"outputId":"5973dfd7-6772-4459-a393-b859eb6e22dc"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Elapsed (sec) = 57.228665351867676\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["WoJbB3T5Vkw-","QadLRsY0hIga","D-xki0BeGIOY","m0phl-Kp-IpW","4w-eKaICUut7","qksYnBHcuJGi"],"name":"CUDA_lab4. ipynb","provenance":[{"file_id":"15IDLiUMRJbKqZUZPccyigudINCD5uZ71","timestamp":1647557168268}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}